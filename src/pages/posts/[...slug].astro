---
import ArticleLayout from '@layouts/ArticleLayout.astro';

import { getEntry } from 'astro:content';
const { slug } = Astro.params;

if (slug === undefined) {
  throw new Error('Slug is required');
}

const entry = await getEntry('articles', slug);

if (entry === undefined) {
  return Astro.redirect('/404');
}

const { Content } = await entry.render();

import { db, Comment, desc, eq, NOW } from 'astro:db';

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const author = formData.get('author');
  const body = formData.get('body');
  const slug = entry.slug;
  const published = NOW;
  if (typeof author === 'string' && typeof body === 'string') {
    await db.insert(Comment).values({ slug, author, body, published });
  }
}

const comments = await db
  .select()
  .from(Comment)
  .orderBy(desc(Comment.published))
  .where(eq(Comment.slug, entry.slug));
---

<ArticleLayout>
  <section class="px-8">
    <article class="prose prose-2xl prose-gray mx-auto dark:prose-invert prose-code:font-jetbrains">
      <Content />
    </article>
  </section>

  <form method="POST" style="display: grid">
    <label for="body">Comment</label>
    <textarea id="body" name="body"></textarea>

    <label for="author">Author</label>
    <input id="author" name="author" />

    <button type="submit">Submit</button>
  </form>

  {
    comments.map(({ author, body, published }) => {
      return (
        <article class="text-2xl">
          <p>{published}</p>
          <p>Author: {author}</p>
          <p>{body}</p>
        </article>
      );
    })
  }
</ArticleLayout>
